<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mathematics on Tidbits</title><link>https://jack-champagne.github.io/tags/mathematics/</link><description>Recent content in Mathematics on Tidbits</description><generator>Hugo 0.71.1 -- gohugo.io</generator><language>en</language><managingEditor>jackchampagne.r@gmail.com (Jack Champagne)</managingEditor><webMaster>jackchampagne.r@gmail.com (Jack Champagne)</webMaster><copyright>Jack Champagne — All rights reserved.</copyright><lastBuildDate>Thu, 28 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jack-champagne.github.io/tags/mathematics/index.xml" rel="self" type="application/rss+xml"/><item><title>Permutations in Rust Code</title><link>https://jack-champagne.github.io/posts/2023-12-28-permutations-in-rust/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><author>jackchampagne.r@gmail.com (Jack Champagne)</author><guid isPermaLink="true">https://jack-champagne.github.io/posts/2023-12-28-permutations-in-rust/</guid><description>&lt;p>This is a bit of a continuation of the last post &lt;a href="https://jack-champagne.github.io/2023-12-26-minimal-representations.md">here&lt;/a>&lt;/p>
&lt;p>I have implemented a very simple permutation group bit of code. The idea behind the design of this showcases why I think algebraic type systems are so powerful. Simply put, only operations between permutations that act on the same number of objects make any sense. This of course is usually not a problem when the permutations are of different lengths, its always easy to insert an identity map to additional elements on the smaller of the two then proceed, but leveraging rusts type system to ensure that operations accept operands of the same group is a powerful thing.&lt;/p>
&lt;p>I decided that the representation of a permutation should be an array. Each index of the array contains what that element maps to. If I wanted to represent a permutation in which 2 items swap, in cycle notation it would be written like so: (1 2).&lt;/p>
&lt;p>Looking at the internal array for this permutation, it looks a bit strange: [2, 1]. There is a bit of a tension here between standard mathematical notation and computer programming, although unimportant. In standard permutation notation, 1 is the first element. Thus this array is saying that 1 maps to 2, and 2 maps to 1. Of course in code, the indexcies are off by one. Why does an internal implementation conform to such arbitrary standards? Mainly cause of my comfort with existing notation.&lt;/p>
&lt;p>Here are some key snippets from the code&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="cp">#[derive(Debug, Clone)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Permutation&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SIZE&lt;/span>: &lt;span class="kt">usize&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">map&lt;/span>: &lt;span class="p">[&lt;/span>&lt;span class="kt">usize&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SIZE&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and this one&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SIZE&lt;/span>: &lt;span class="kt">usize&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Permutation&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">SIZE&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">compose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">other&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Permutation&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">SIZE&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">map_copy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="n">SIZE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">map_copy&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Self&lt;/span>::&lt;span class="n">index_from_elem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">])];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">map&lt;/span>: &lt;span class="nc">map_copy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>pretty great! This allows chaining compositions like so:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s4_1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Permutation&lt;/span>::&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>::&lt;span class="n">random&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s4_2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Permutation&lt;/span>::&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>::&lt;span class="n">random&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// e • (s4_2 • (s4_2 • s4_1)) = ??
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">dbg&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s4_1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">compose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s4_2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">compose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s4_2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">compose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">Permutation&lt;/span>::&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">()));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Thus if s4_1 = (1)(2 4 3), s4_2 = (1 3 4)(2), and e = (1)(2)(3)(4) per usual&amp;hellip;&lt;/p>
&lt;p>&lt;code>e • (s4\_2 • (s4\_2 • s4\_1)) = (1)(2)(3)(4) • (1 3 4)(2) • (1 3 4)(2) • (1)(2 4 3) = (1 4)(2 3)&lt;/code>&lt;/p>
&lt;p>or as output:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[&lt;/span>src/main.rs:103&lt;span class="o">]&lt;/span> &lt;span class="p">&amp;amp;&lt;/span>s4_1.compose&lt;span class="o">(&lt;/span>&lt;span class="p">&amp;amp;&lt;/span>s4_2&lt;span class="o">)&lt;/span>.compose&lt;span class="o">(&lt;/span>&lt;span class="p">&amp;amp;&lt;/span>s4_2&lt;span class="o">)&lt;/span>.compose&lt;span class="o">(&lt;/span>&lt;span class="p">&amp;amp;&lt;/span>Permutation::&amp;lt;4&amp;gt;::new&lt;span class="o">())&lt;/span> &lt;span class="o">=&lt;/span> Permutation &lt;span class="o">{&lt;/span>
map: &lt;span class="o">[&lt;/span>
4,
3,
2,
1,
&lt;span class="o">]&lt;/span>,
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Excellent!&lt;/p>
&lt;p>Next, implementing the cyclic groups&lt;/p></description></item><item><title>Rubik's Cube pt 2</title><link>https://jack-champagne.github.io/posts/2023-12-26-minimal-representations/</link><pubDate>Tue, 26 Dec 2023 00:00:00 +0000</pubDate><author>jackchampagne.r@gmail.com (Jack Champagne)</author><guid isPermaLink="true">https://jack-champagne.github.io/posts/2023-12-26-minimal-representations/</guid><description>&lt;p>After implementing a small (and painful) visualization for the bit of code I have been working to model puzzle cubes, I came to realization about representation. I was hoping that a more elegant way of describing movements of the cube would lead to a more elegant solution of programming such a solution. I read over the majority of &lt;a href="https://people.math.harvard.edu/~jjchen/docs/Group%20Theory%20and%20the%20Rubik%27s%20Cube.pdf">the document mentioned in the previous post&lt;/a> and pondered a bit on it. I wondered how minimal was my representation (modeling each visible face of each cubie affected by rotations - not centers) compared to a full mathematical description. This document was very interesting, its detailing of the groups that describe each of the 4 components of the cube (position &amp;amp; orientation for edges, position &amp;amp; orientation for corners), it review of group actions, basic information on permutations, and a little on orbits was great. In fact, the biggest takeaway from all of this, which was given towards the end, was that given a group action G, that acts on the set describing the cube&amp;rsquo;s configuration: &amp;ldquo;The orbit of the start configuration under this action is exactly the set of valid configurations of the Rubik&amp;rsquo;s cube.&amp;rdquo;&lt;/p>
&lt;p>This is great, because it helped me conceptualize a bit better what an orbit can mean, as well as relate what I see in reality with cubes with the mathematical representation discussed there. What it means for a configuration to be &amp;lsquo;valid&amp;rsquo; is somewhat ignored, until this very last section. It might surprise some folks but it is not possible to solve a Rubik&amp;rsquo;s cube with only valid moves if a single corner or edge is flipped. This is due to the fact that not all possible configurations of edge and corner piece positionings and orientations are possible from the start configuration (though sometimes it can happen through &lt;a href="https://youtu.be/Vg23BI6sv1w">other means&lt;/a>).&lt;/p>
&lt;p>Regardless, while contemplating how the permutation cycle notation could be used as part of the software representation instead of the crazy repetitive setup I have going on right now, I realized that its not hard at all. With each piece, I apply the permutation the cycle notation defines to know where it should be in the end state. This is perfectly convenient as computing locations for each cubie could be done just via the stored permutation from a known state. This stored permutation can be updated by successive moves of course by simply composing the permutation from the group of moves (group action G) with the current permutation and storing the result. These computations may be a bit easier to reason about, rather than the crazy indexing I have going on right now.&lt;/p>
&lt;p>One thing of note though, is that the crazy setup I have going on right now is still fairly minimal. The permutation cycle notation will still need to encode the orientations and positions for the edge and corner cubies respectively. This means 12 edge cubies * 2 orientations + 8 corner cubies * 3 orientations = 48 things to track here. However, my current implementation is using a 48 element array to track the state of the cube. The most minimal representation I can currently think of would be something along the lines of the number of bits required to store which element of S8 x S12 x C3^8 x C2^12 = 519 quintillion ~= 69 bits of information. It turns out the number of valid configurations (ones in the orbit of legal moves on the cube from the solved state) is exactly 1/12 of the number of total configurations (this is shown in Theorem 11.1 and stated in Remark 11.15 of that document). Thus, maybe there is some way to reduce the representation down to something on the order of ~66 bits, however I do not know how I would do so at the moment.&lt;/p>
&lt;p>Next on the chopping block, implementing permutation arithmetic operations to calculate state with this new representation!&lt;/p></description></item><item><title>The Hobbit</title><link>https://jack-champagne.github.io/posts/2020-05-26-the-hobbit/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><author>jackchampagne.r@gmail.com (Jack Champagne)</author><guid isPermaLink="true">https://jack-champagne.github.io/posts/2020-05-26-the-hobbit/</guid><description>&lt;p>Last night, after 4.5 hours of watching movies yesterday me and my girlfriend Lillian finished &lt;em>The Hobbit&lt;/em> movie trilogy. The precursor to the &lt;em>Lord of the Rings&lt;/em> series by J. R. R. Tolkien. I have to say a few things about the series so far. For one, I was surprised to see the middle movie &lt;em>Desolation of Smaug&lt;/em> have signifigantly lower (only slightly) ratings than the other two movies overall. After watching the movie it made a lot of sense to my as to why. If I had to watch that movie in movie theaters and the next movie &lt;em>Battle of Five Armies&lt;/em> hadn&amp;rsquo;t come out yet, I would have been deeply frustrated with the ending. The movie finished off on a cliff-hanger that was far too-intense for my liking. I enjoy having movies leave some to be desired so it doesn&amp;rsquo;t feel too conclusive but having a dragon (Smaug) moments away from descending down on a town and causing death and destruction and then ending the movie was a bit of a cop out in my opinion. Since I was watching these movies after all of them have been released, that frustration wasn&amp;rsquo;t there and actually was something I found to be a positive. The previous movie, of course, now led in perfectly to the final movie, picking up right where we left off.&lt;/p>
&lt;p>Today, I am getting some work done for AirCycler and am taking the day for myself. So far it has been quite slow and my recent Youtube ban has been a little bit of a failure. I am learning though! From my failures that is. I defeated Reddit two years ago now and am looking at implementing a better system for myself. I believe that less of the time-sucker apps and content in my life will contribute to a bigger feeling of fulfillment, better sleep, better mental health, and better motivation. Overall this will free up my time for other activities that I also enjoy but will be more informative, interesting, and fulfilling. I would like to read the book &lt;em>Automate the Boring stuff&lt;/em> by Al Sweigart. I find it could be very useful in the future for me, getting rid of the monotonous tasks that I will envitably have to do. I would also like to read the textbook &lt;em>Nonlinear Dynamics and Chaos&lt;/em> by Steven H. Strogatz which so far has been very interesting and enlightening. (Those challenge problems are pretty hard!)&lt;/p>
&lt;p>Till next time,
Jack&lt;/p></description></item></channel></rss>