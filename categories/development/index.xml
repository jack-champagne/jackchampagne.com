<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Tidbits</title><link>https://jack-champagne.github.io/categories/development/</link><description>Recent content in Development on Tidbits</description><generator>Hugo 0.71.1 -- gohugo.io</generator><language>en</language><managingEditor>jackchampagne.r@gmail.com (Jack Champagne)</managingEditor><webMaster>jackchampagne.r@gmail.com (Jack Champagne)</webMaster><copyright>Jack Champagne — All rights reserved.</copyright><lastBuildDate>Fri, 20 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://jack-champagne.github.io/categories/development/index.xml" rel="self" type="application/rss+xml"/><item><title>UnitaryCon and ROCm</title><link>https://jack-champagne.github.io/posts/2024-09-20-rocm-unitarycon/</link><pubDate>Fri, 20 Sep 2024 00:00:00 +0000</pubDate><author>jackchampagne.r@gmail.com (Jack Champagne)</author><guid isPermaLink="true">https://jack-champagne.github.io/posts/2024-09-20-rocm-unitarycon/</guid><description>&lt;p>This post is not a continuation of the last post - however I do have an additional update to it. This sort of multiple dispatch across a defined interface (or Trait in Rust&amp;rsquo;s case) might not be warranted here. Generally, a faithful Rust implementation of similar behavior would be in the form of an enum - with cases for each value (the overall type here being a group, and the enum variants would be the various groups I want to define). This is the idea of &amp;ldquo;composition over inheritance&amp;rdquo; here at work. The only issue is the extra information and constraints that the inner enum variants give on type operations. Because Rust&amp;rsquo;s type system is so expressive, I was relying upon the compiler to (at compile time) throw errors if incompatble types (different groups) had operations defined against eachother.&lt;/p>
&lt;p>I got pretty far with the last implementation - with nice working groups and compile time checked operations on those groups. The issue that stopped me for now was trying to define a direct product - which would also implement the group type, and all operations on it would be type checked at compile time (&lt;strong>hard&lt;/strong>).&lt;/p>
&lt;p>For summer updates, I will have to keep it brief - contact me directly if you want to know more. I worked an interesting embedded software position and had a really successful project outcome. Loved the folks I met and didn&amp;rsquo;t have to move again (how great!).&lt;/p>
&lt;p>In other updates, I recently attended the open-source quantum computing software ecosystem conference run by the &lt;a href="https://unitary.fund">unitary fund&lt;/a>. It was a fantastic conference in Helsinki, mets lots of awesome people, and partook in the Finnish fondness for saunas. I do miss how well the suspensions on their public transit rail lines kept the car from reacting to bumps - I nearly fell asleep it was so quite and smooth.&lt;/p>
&lt;p>Been playing a bit with ROCm recently and looking at the gaps that exist for it in its co-existence and fight for relevance against Nvidia&amp;rsquo;s CUDA. I am optimistic, this sort of firmware and encouraging competition in this part of the tech landscape I am very much for. If I had additional time, I would try a become part of the folks that are working on improving this every day - Nvidia&amp;rsquo;s moat here may not be as deep as the markets seem to think. I have also been playing with some of the Rust large language model stuff that&amp;rsquo;s out there now (see &lt;a href="https://github.com/floneum/floneum">kalosm and floneum&lt;/a>.&lt;/p>
&lt;p>Till next time&lt;/p>
&lt;ul>
&lt;li>Jack&lt;/li>
&lt;/ul></description></item><item><title>Modeling Algebraic Structures</title><link>https://jack-champagne.github.io/posts/2024-01-11-algebraic-structures/</link><pubDate>Thu, 11 Jan 2024 00:00:00 +0000</pubDate><author>jackchampagne.r@gmail.com (Jack Champagne)</author><guid isPermaLink="true">https://jack-champagne.github.io/posts/2024-01-11-algebraic-structures/</guid><description>&lt;p>This is a bit of a continuation of the last post &lt;a href="https://jack-champagne.github.io/posts/2023-12-28-permutations-in-rust">here&lt;/a>&lt;/p>
&lt;p>Cyclic groups were implemented since the last post and both now implement a generic &lt;code>Group&lt;/code> trait. This comes with its
own unique benefits and drawbacks. The benefit is that a set of operations that every &lt;code>Group&lt;/code> must implement can be defined
and centralized in a single spot in source - thus the definition of the interface provided. The downside is that the way
I currently have the &lt;code>Group&lt;/code> trait implemented and its generic associates with some methods returning &lt;code>Self&lt;/code> - I am now fighting
my way through the limitations of Rusts dynamic dispatching. Specifically fighting my way through this problem:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">error[E0038]: the trait `Group` cannot be made into an object
--&amp;gt; groups/src/lib.rs:34:25
|
34 | components: Vec&amp;lt;Box&amp;lt;dyn Group&amp;gt;&amp;gt;,
| ^^^^^^^^^ `Group` cannot be made into an object
|
note: for a trait to be &amp;#34;object safe&amp;#34; it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit &amp;lt;https://doc.rust-lang.org/reference/items/traits.html#object-safety&amp;gt;
--&amp;gt; groups/src/lib.rs:26:25
|
25 | pub trait Group {
| ----- this trait cannot be made into an object...
26 | fn op(&amp;amp;self, other: &amp;amp;Self) -&amp;gt; Self;
| ^^^^^ ...because method `op` references the `Self` type in this parameter
27 |
28 | fn inv(&amp;amp;self) -&amp;gt; Self;
| ^^^^ ...because method `inv` references the `Self` type in its return type
29 |
30 | fn identity() -&amp;gt; Self;
| ^^^^^^^^ ...because associated function `identity` has no `self` parameter
= help: consider moving `op` to another trait
= help: consider moving `inv` to another trait
help: consider turning `identity` into a method by giving it a `&amp;amp;self` argument
|
30 | fn identity(&amp;amp;self) -&amp;gt; Self;
| +++++
help: alternatively, consider constraining `identity` so it does not apply to trait objects
|
30 | fn identity() -&amp;gt; Self where Self: Sized;
| +++++++++++++++++
For more information about this error, try `rustc --explain E0038`.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The useful reading is of course in &lt;a href="https://doc.rust-lang.org/reference/items/traits.html#object-safety">the docs&lt;/a>&lt;/p>
&lt;p>and the output of &lt;code>rustc --explain E0038&lt;/code> is also helpful.&lt;/p>
&lt;p>This is unfortunate however, and I am worried that I won&amp;rsquo;t be able to have the interfaces and datastructures I desire to model
the next part - direct products of groups. I always imagined them as tuples where each component of the tuple was an element of
that specific component&amp;rsquo;s group. Like for the group &lt;code>S_4&lt;/code> and &lt;code>C_4&lt;/code> denoting the permutation group on 4 elements and the cyclic
group of order 4 respectively, &lt;code>a ∈ S_4 x C_4&lt;/code> where &lt;code>a = (a_1, a_2) s.t. a_1 ∈ S_4 and a_2 ∈ C_4&lt;/code>. Ideally, the source code, datastructures, and interface would closely resemble this and yet I have this problem. Guess I have some reading to do on those pages - and maybe on generic associated types? (GATs)&lt;/p>
&lt;p>Putting this on pause for a little bit to do some homelab-ing/life stuff/organization.&lt;/p>
&lt;ul>
&lt;li>Jack&lt;/li>
&lt;/ul></description></item><item><title>Permutations in Rust Code</title><link>https://jack-champagne.github.io/posts/2023-12-28-permutations-in-rust/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><author>jackchampagne.r@gmail.com (Jack Champagne)</author><guid isPermaLink="true">https://jack-champagne.github.io/posts/2023-12-28-permutations-in-rust/</guid><description>&lt;p>This is a bit of a continuation of the last post &lt;a href="https://jack-champagne.github.io/posts/2023-12-26-minimal-representations">here&lt;/a>&lt;/p>
&lt;p>I have implemented a very simple permutation group bit of code. The idea behind the design of this showcases why I think algebraic type systems are so powerful. Simply put, only operations between permutations that act on the same number of objects make any sense. This of course is usually not a problem when the permutations are of different lengths, its always easy to insert an identity map to additional elements on the smaller of the two then proceed, but leveraging rusts type system to ensure that operations accept operands of the same group is a powerful thing.&lt;/p>
&lt;p>I decided that the representation of a permutation should be an array. Each index of the array contains what that element maps to. If I wanted to represent a permutation in which 2 items swap, in cycle notation it would be written like so: (1 2).&lt;/p>
&lt;p>Looking at the internal array for this permutation, it looks a bit strange: [2, 1]. There is a bit of a tension here between standard mathematical notation and computer programming, although unimportant. In standard permutation notation, 1 is the first element. Thus this array is saying that 1 maps to 2, and 2 maps to 1. Of course in code, the indexcies are off by one. Why does an internal implementation conform to such arbitrary standards? Mainly cause of my comfort with existing notation.&lt;/p>
&lt;p>Here are some key snippets from the code&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="cp">#[derive(Debug, Clone)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Permutation&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SIZE&lt;/span>: &lt;span class="kt">usize&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">map&lt;/span>: &lt;span class="p">[&lt;/span>&lt;span class="kt">usize&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SIZE&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and this one&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SIZE&lt;/span>: &lt;span class="kt">usize&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Permutation&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">SIZE&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">compose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">other&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Permutation&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">SIZE&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">map_copy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="n">SIZE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">map_copy&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Self&lt;/span>::&lt;span class="n">index_from_elem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">])];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">map&lt;/span>: &lt;span class="nc">map_copy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>pretty great! This allows chaining compositions like so:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s4_1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Permutation&lt;/span>::&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>::&lt;span class="n">random&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s4_2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Permutation&lt;/span>::&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>::&lt;span class="n">random&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// e • (s4_2 • (s4_2 • s4_1)) = ??
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">dbg&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s4_1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">compose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s4_2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">compose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s4_2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">compose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">Permutation&lt;/span>::&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">()));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Thus if s4_1 = (1)(2 4 3), s4_2 = (1 3 4)(2), and e = (1)(2)(3)(4) per usual&amp;hellip;&lt;/p>
&lt;p>&lt;code>e • (s4_2 • (s4_2 • s4_1)) = (1)(2)(3)(4) • (1 3 4)(2) • (1 3 4)(2) • (1)(2 4 3) = (1 4)(2 3)&lt;/code>&lt;/p>
&lt;p>or as output:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[&lt;/span>src/main.rs:103&lt;span class="o">]&lt;/span> &lt;span class="p">&amp;amp;&lt;/span>s4_1.compose&lt;span class="o">(&lt;/span>&lt;span class="p">&amp;amp;&lt;/span>s4_2&lt;span class="o">)&lt;/span>.compose&lt;span class="o">(&lt;/span>&lt;span class="p">&amp;amp;&lt;/span>s4_2&lt;span class="o">)&lt;/span>.compose&lt;span class="o">(&lt;/span>&lt;span class="p">&amp;amp;&lt;/span>Permutation::&amp;lt;4&amp;gt;::new&lt;span class="o">())&lt;/span> &lt;span class="o">=&lt;/span> Permutation &lt;span class="o">{&lt;/span>
map: &lt;span class="o">[&lt;/span>
4,
3,
2,
1,
&lt;span class="o">]&lt;/span>,
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Excellent!&lt;/p>
&lt;p>Next, implementing the cyclic groups&lt;/p></description></item><item><title>Rubik's Cube pt 2</title><link>https://jack-champagne.github.io/posts/2023-12-26-minimal-representations/</link><pubDate>Tue, 26 Dec 2023 00:00:00 +0000</pubDate><author>jackchampagne.r@gmail.com (Jack Champagne)</author><guid isPermaLink="true">https://jack-champagne.github.io/posts/2023-12-26-minimal-representations/</guid><description>&lt;p>After implementing a small (and painful) visualization for the bit of code I have been working to model puzzle cubes, I came to realization about representation. I was hoping that a more elegant way of describing movements of the cube would lead to a more elegant solution of programming such a solution. I read over the majority of &lt;a href="https://people.math.harvard.edu/~jjchen/docs/Group%20Theory%20and%20the%20Rubik%27s%20Cube.pdf">the document mentioned in the previous post&lt;/a> and pondered a bit on it. I wondered how minimal was my representation (modeling each visible face of each cubie affected by rotations - not centers) compared to a full mathematical description. This document was very interesting, its detailing of the groups that describe each of the 4 components of the cube (position &amp;amp; orientation for edges, position &amp;amp; orientation for corners), it review of group actions, basic information on permutations, and a little on orbits was great. In fact, the biggest takeaway from all of this, which was given towards the end, was that given a group action G, that acts on the set describing the cube&amp;rsquo;s configuration: &amp;ldquo;The orbit of the start configuration under this action is exactly the set of valid configurations of the Rubik&amp;rsquo;s cube.&amp;rdquo;&lt;/p>
&lt;p>This is great, because it helped me conceptualize a bit better what an orbit can mean, as well as relate what I see in reality with cubes with the mathematical representation discussed there. What it means for a configuration to be &amp;lsquo;valid&amp;rsquo; is somewhat ignored, until this very last section. It might surprise some folks but it is not possible to solve a Rubik&amp;rsquo;s cube with only valid moves if a single corner or edge is flipped. This is due to the fact that not all possible configurations of edge and corner piece positionings and orientations are possible from the start configuration (though sometimes it can happen through &lt;a href="https://youtu.be/Vg23BI6sv1w">other means&lt;/a>).&lt;/p>
&lt;p>Regardless, while contemplating how the permutation cycle notation could be used as part of the software representation instead of the crazy repetitive setup I have going on right now, I realized that its not hard at all. With each piece, I apply the permutation the cycle notation defines to know where it should be in the end state. This is perfectly convenient as computing locations for each cubie could be done just via the stored permutation from a known state. This stored permutation can be updated by successive moves of course by simply composing the permutation from the group of moves (group action G) with the current permutation and storing the result. These computations may be a bit easier to reason about, rather than the crazy indexing I have going on right now.&lt;/p>
&lt;p>One thing of note though, is that the crazy setup I have going on right now is still fairly minimal. The permutation cycle notation will still need to encode the orientations and positions for the edge and corner cubies respectively. This means 12 edge cubies * 2 orientations + 8 corner cubies * 3 orientations = 48 things to track here. However, my current implementation is using a 48 element array to track the state of the cube. The most minimal representation I can currently think of would be something along the lines of the number of bits required to store which element of S8 x S12 x C3^8 x C2^12 = 519 quintillion ~= 69 bits of information. It turns out the number of valid configurations (ones in the orbit of legal moves on the cube from the solved state) is exactly 1/12 of the number of total configurations (this is shown in Theorem 11.1 and stated in Remark 11.15 of that document). Thus, maybe there is some way to reduce the representation down to something on the order of ~66 bits, however I do not know how I would do so at the moment.&lt;/p>
&lt;p>Next on the chopping block, implementing permutation arithmetic operations to calculate state with this new representation!&lt;/p></description></item><item><title>Please see post below</title><link>https://jack-champagne.github.io/posts/2022-01-19-site-updates/</link><pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate><author>jackchampagne.r@gmail.com (Jack Champagne)</author><guid isPermaLink="true">https://jack-champagne.github.io/posts/2022-01-19-site-updates/</guid><description>&lt;p>This site continues to evolve as I work on my self-hosting project at home with gateway. I have transitioned most of the notetaking that I did here into Obsidian because of multiple reasons including quality, markdown linking support, graph view, and more.&lt;/p>
&lt;p>One important note that I want to make is to check out
&lt;a href="https://www.jackchampagne.com/desmos/">math animations&lt;/a> for some fun animations that aren&amp;rsquo;t public facing.&lt;/p>
&lt;p>This blog was a technical project that I am moving to my private server in order to have more control over the hosting and build process of the static pages.&lt;/p>
&lt;p>Thank you!
Jack&lt;/p></description></item><item><title>Slow roll of changes</title><link>https://jack-champagne.github.io/posts/2021-06-18-more-updates/</link><pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate><author>jackchampagne.r@gmail.com (Jack Champagne)</author><guid isPermaLink="true">https://jack-champagne.github.io/posts/2021-06-18-more-updates/</guid><description>&lt;p>Watching a lot of George Hotz recently. I am deeply inspired by his skills and his constant focus on his work. comma.ai and his new streams about the cherry computer are deeply interesting to me and I find that his content in general relates very well with my studies in statistics, mathematics, data science, machine learning, deep learning, and general computer science.&lt;/p>
&lt;p>I started my REU (TRIPODS @ University of Massachusetts, Amherst) on Monday the 7th and since then have trained multiple models on my computer (actually my laptop because it has cuda cores). I am working on implementing a g-convolution into a new network to try and improve my preformance on a rotated and mirrored MNIST dataset. I haven&amp;rsquo;t quite figured out how each of the dimensions to my convolution is going to fit into the training but progress is coming along.&lt;/p>
&lt;p>In other news, I am not so sure I want to stay with hugo. The popularity of jekyll really helps with finding themes and general documentation for me.&lt;/p>
&lt;p>Been a while&lt;/p>
&lt;ul>
&lt;li>Jack&lt;/li>
&lt;/ul></description></item><item><title>Site Update 1</title><link>https://jack-champagne.github.io/posts/2020-09-15-site-update-1/</link><pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate><author>jackchampagne.r@gmail.com (Jack Champagne)</author><guid isPermaLink="true">https://jack-champagne.github.io/posts/2020-09-15-site-update-1/</guid><description>&lt;p>I have been thinking what I want to do with my online presence recently. The idea of create passive income sources has inspired me to create a bit of a business for myself online. I&amp;rsquo;m not really sure what I would do yet and have not found the time or headspace but I do think it is coming. I think this blog will be pushed to either a subdomain or under /blog/ or something like that.&lt;/p>
&lt;p>I have a couple of ideas right now of things that I have always wanted to create or do. I love the intersection between technology, math, and computer science but I find the space is quite saturated with channels and information. There is not a ton of channels that combine easy surface level explanations of concepts with many following videos. I would love to create something that is very me and highly accessible to anyone looking to make or do something.&lt;/p>
&lt;p>Probably will elaborate on this later or will be creating links to examples/products of mine to explain what I am talking about.&lt;/p></description></item><item><title>What working from home is like</title><link>https://jack-champagne.github.io/posts/2020-06-25-working-from-home/</link><pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate><author>jackchampagne.r@gmail.com (Jack Champagne)</author><guid isPermaLink="true">https://jack-champagne.github.io/posts/2020-06-25-working-from-home/</guid><description>&lt;p>Working from home has been a big challenge during Coronavirus. Mainly because the lack of a dedicated space that I must work in but also because of the sociality of working from home. It is &lt;em>easy&lt;/em> to stop work at 2 and hang out with friends or my girlfriend and veg out for the rest of the day. It is &lt;em>easy&lt;/em> to get distracted from what I was doing, it is easy to go downstairs and have a bite to eat and read an article. All of these easy things make something simple, like sitting down and typing at a computer hard. It has made me soft; I am complacent with my own laziness, sloth, and ability to &amp;ldquo;not work as hard&amp;rdquo; during these times and I feel as though I have mostly myself to blame. I remember working in a kitchen at the Milepost restaurant for a year before I landed my current job at AirCycler (which is a whole other story) and it was honest work. I remember coming home some night, smelling like a rotting garbage bin and thinking to myself, &amp;ldquo;Wow, I can&amp;rsquo;t wait to get into the shower and crawl into bed, my body hurts and that was a hell of a day.&amp;rdquo;&lt;/p>
&lt;p>There are things that I am grateful for and some things that I would like to change. Change doesn&amp;rsquo;t happen immediately though, it happens gradually, through consistent effort. Instead of making a 100% improvement on my life today, making a 1% improvement every day for a hundred days will net me 270% change in wellbeing. The second one is far more sustainable (and is another beautiful example of compound interest). My good friend Henry popped into my mind as I am writing this because he wasn&amp;rsquo;t hanging out with the gang earlier today. He works very hard and it is something that I admire. 40 hours a week, waking up at 6:30am, all things that don&amp;rsquo;t seem in reach to me but things that are very attainable through lifestyle changes. Althought right now, maybe this is procrastination with the work that I should be pursuing.&lt;/p>
&lt;p>Earlier this day, Russell, Luke, Hannah, Dylan, Sam, Lillian, and I went to Dylan&amp;rsquo;s house in Saquish and relaxed on the beach. I was a great day with lots of grilled food, tubing, boating, talking with friends, and playing cornhole. The weather was perfect and it was entertaining to catch up with friends and just do whatever I wanted. I did not get sunburnt surprisingly and I was also very akeen to going swimming even though I didn&amp;rsquo;t bring a proper bathing suit. This is part of the reason why I am writing this. Today was fulfilling, but at the expense of my schedule and routine. I am tired in a good way but yet there is still work left undone. Bubbles needs to be finished and I want to move on from my demons of design and old outdated frameworks (.NET Framework 4.5 and Winforms). I have ideas for the stock market, self-automation, personal business that I want to pursue but do not want to cut my ties at AirCycler. I have enjoyed AirCycler very much and have had a pleasure working on the BATS project as well as this project (Bubbles) I am working on right now. It has been a fulfilling and rewarding expirience that has brought me great people, cool projects, and good connections and I am grateful. I am a bit rambly by now but in some ways I do wish I could go back to the office because I miss interacting with those coworkers. I do miss school because of my friends, the makerspace, and my classes/dorm living. This is the sacrifice that I make.&lt;/p>
&lt;p>Some good news and updates about father&amp;rsquo;s day and life:
My dad and I added a roof to the eagle scout sign project on fathers day. This came as a sign of relief and as one thing less to pester my (and my dad&amp;rsquo;s) thoughts at night. Sally was delighted to see that I had added it and it marked for me on of the last few things that I felt hanging over me from long before this whole thing started.&lt;/p>
&lt;p>I am now beginning to realize at this very moment that to make adding pictures to this blog (which I have really wanted to do) making a python script that automates the process of implementing it onto the blog would be really nice.&lt;/p>
&lt;p>Continuing: My grandmother&amp;rsquo;s birthday was recent and, as a surprise, my dad, Hailey, Lillian, and I decided to head out to her and as a surprise for dinner. We ate at Jae&amp;rsquo;s and I drove the entire way there (We met my dad at intersection between 44 and 495 to drop off the Jeep Grand Cherokee). Right when I was about to turn left and head up the hill to the hotel that Jae&amp;rsquo;s in under, I had a problem with the transmission. When I gave the car power, it seemed like the tranmission wasn&amp;rsquo;t enganging and the car wasn&amp;rsquo;t able to get into drive. I was able to get it to pop and make it up the hill but 3/4 up the hill, the same thing happened again. This is when I became concerned. I shifted into four-wheel drive and was able to get it to catch again and made it to the hotel parking lot. We all got out of the car and my dad wanted to check on the transmission to see if we were going to need to make alternate plans going home. Reverse still worked fine but my dad, 4-wheel or no 4-wheel, was not able to get the transmission to engage. After 336,000 miles, the iconic 2009 GMC Yukon was dead. It was in the shop for new brake calipers (It still had the original!!) just that weekend and now we were stranded 3 hours from home at my grandmother&amp;rsquo;s birthday dinner. We went in and had a delicious and funny dinner at Jae&amp;rsquo;s. My grandmother, her sister Lynn, my Aunt Suzanne and JG sat at one table and we sat a table right next to them, but slightly apart. I ordered a burger and picked at everyone else orders. My Aunt Suzanne drove us to the Jeep Grand Cherokee in the hotel parking lot to get us home that night and we played crosswords in the car. My dad began the process of purchasing a car and intended on purchasing a car the day before this all happened. Yesterday, he finally purchased the car he wanted, a pickup truck, something that I think is a really good purchase. I have not driven it yet, nor sat in the interior, but when I dropped him off at the dealership to drive it home, the interior looked really nice. This car should last him a while&amp;hellip; I hope.&lt;/p>
&lt;p>Minecraft 1.16 and 1.16.1 came out on the 23rd and 24th respectively and Lillian and I have been playing them nonstop. I have been busy with the multi-item sorter (so neccessary) while she&amp;rsquo;s been gathering some netherrite. I updated both of my servers and started contemplating a dedicated piece of hardware for all of this and for other projects I am interested in doing.&lt;/p>
&lt;p>Also of note: I migrated back to Github pages because of the website bloat that Netlify was causing. To properly use netlify, I would have to added a few things that I did not want. I want this site to be lightweight (other than the photos I guess) and want each aspect to be tightly controlled. It was a fairly smooth process in my opinion.&lt;/p>
&lt;p>Anyways, I think I have put off work long enough, or maybe I&amp;rsquo;m ready to just give up for the night and call it a day. Who knows?? (me, calling it a day)
Till next time,
Jack&lt;/p>
&lt;p>Also just want to say briefly that moments ago (you can look at commits now, I found the www. subdomain was not working, currently trying to fix)&lt;/p></description></item><item><title>Priorities &amp; Youtube</title><link>https://jack-champagne.github.io/posts/2020-06-07-priorities/</link><pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate><author>jackchampagne.r@gmail.com (Jack Champagne)</author><guid isPermaLink="true">https://jack-champagne.github.io/posts/2020-06-07-priorities/</guid><description>&lt;h3 id="youtube-uses-too-much-of-my-time">Youtube uses too much of my time.&lt;/h3>
&lt;p>And I am very aware of it. About five days ago, I made a promise to myself after my last experiment with &lt;em>quitting&lt;/em> youtube failed. I thought that I would be able to curb my Youtube habit by limiting myself to only watching what I came to the site to watch. This way I would not browse and fall victim to their powerful recommendation algorithm.&lt;/p>
&lt;p>This failed, and it failed by slow loosening of the rules and gradual slippage back into prior habits. Because of this, I made a decision to &lt;strong>stop&lt;/strong> watching Youtube completely for the time being. This means I cannot go on my laptop, cannot go on the app, cannot watch it on the Tv, and cannot watch a quick video that a friend may have sent me. It is a strict ban for probably forever. If I ever wanted to use the platform again, I am thinking of a couple of ways that I could do so in a completely non-addictive and fully informative matter. One method is that I must download the videos (that I was thinking of watching) first on to my device to seperate myself from the platform. I would not be allowed to let Youtube&amp;rsquo;s algorithm serve me what to watch but instead I must know it beforehand. This will be far into the future where I can live completely seperate from the need to watch video.&lt;/p>
&lt;p>On another note, I have been reading &lt;em>Automate the Boring Stuff with Python&lt;/em> by Al Sweigart (which I will abbrv. as ABSP) and so far I have really enjoyed it. I am currently on the filesystem chapter and the section that details how to use python to compress (&amp;ldquo;zip&amp;rdquo;) files. I am looking forward to later chapters, particularly the ones on webscraping and &lt;em>sending emails and texts&lt;/em> 😮 with python. Last night, on a short call with my friend Matt Keating, we discussed python and a few programming things over the phone while I toured the cathedral that he was building on the ski guys minecraft server. He reminded me of a website that I have been fond of but have only now come back to: &lt;a href="https://projecteuler.net">Project Euler&lt;/a> is a collection of programming puzzles on algorithms, data-structures, optimization and more. Solving the problems it presents is a unique challenge (much like &lt;a href="https://www.codeabbey.com/">Code Abbey&lt;/a> or &lt;a href="https://code.golf/">Code Golf&lt;/a>) that is rewarding. I have signed back up and hopefully the python that I have learned from this book, I can properly apply for some good problem solving.&lt;/p>
&lt;h3 id="priorites">Priorites&lt;/h3>
&lt;p>A list of priorities is always important, especially for the person who likes to work on a thousand other problems before solving the big daunting problem that has been hanging over their head for weeks (me). I read an article this morning from Harvard Business Review about self-sabotaging behaviours which is what has inspired this section. So here is my current list of priorities to myself:&lt;/p>
&lt;ol>
&lt;li>My Health is most important and I think that focusing on this is one of the most valuable things I can do for myself. (Sleep, excersize, hygiene)&lt;/li>
&lt;li>Staying away from all the time wasters (Youtube, Snapchat, etc&amp;hellip;) and instead replacing them with something else, like reading out of ABSP.&lt;/li>
&lt;li>Spending quality time with those around me (Family, friends, and my girlfriend)&lt;/li>
&lt;li>Keeping my room clean and establishing a good routine&lt;/li>
&lt;/ol>
&lt;p>And priorities to others:&lt;/p>
&lt;ol>
&lt;li>Get BubblesGUI working with a usable GUI for AirCycler (Simulator, Debugger, Testing)&lt;/li>
&lt;li>&lt;del>Get a roof on the 1623 Trailhead sign (It&amp;rsquo;s been nearly a year!)&lt;/del> (June 21st)&lt;/li>
&lt;li>Clean up around the property (Duxbury, Berlin)&lt;/li>
&lt;/ol>
&lt;p>Thinking about doing a power-hour week sometime soon: One article each day for a week that I just write down my thoughts and day in great detail. Just a thought for now.&lt;/p>
&lt;p>Until later this week,
Jack&lt;/p></description></item><item><title>Netlify incoming</title><link>https://jack-champagne.github.io/posts/2020-06-01-netlify-1/</link><pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate><author>jackchampagne.r@gmail.com (Jack Champagne)</author><guid isPermaLink="true">https://jack-champagne.github.io/posts/2020-06-01-netlify-1/</guid><description>&lt;p>9:20am&lt;/p>
&lt;p>Two days ago, I was able to get the site to build on netlify. The site displayed correctly and as of right now uses the slick theme. As of writing this, I will be working on migrating all of the old site content over to this new site and hooking it up to my domain (&lt;a href="https://jackchampagne.com">https://jackchampagne.com&lt;/a>)&lt;/p>
&lt;p>Will be updating this throughout the morning.&lt;/p>
&lt;p>4:00pm&lt;/p>
&lt;p>So! It&amp;rsquo;s not quite the morning anymore but a TON of stuff has been changed. As I would like to make changes to this theme in the future, I have forked the theme&amp;rsquo;s repo and added it as a git submodule in the &lt;a href="https://github.com/jack-champagne/tidbits">source&lt;/a>. I have also reformatted posts (added categories, tags, and series) and gotten my DNS (hover.com) to use Netlify&amp;rsquo;s nameservers. This will enable me to use their CMS (Content Managment System) and CI (Continuous Integration). Having my domain point to Netlify was as easy as pie this time. Migrating hosts (previously &lt;a href="https://pages.github.com/">github pages&lt;/a>) to Netlify provides numerous advantages, especially the relaxing of the &amp;lsquo;static&amp;rsquo; aspect of the site. Netlify will handle form submissions (providing for email and polling and other fun stuff) and their CI + CMS is really nice. (And it&amp;rsquo;s free! A big emphasis everywhere for me)&lt;/p>
&lt;p>4:08pm&lt;/p>
&lt;p>Now trying to do a local build on my machine before I push the repos to be built on the web! Fingers crossed that cats, tags, and series work properly.&lt;/p>
&lt;p>4:13pm&lt;/p>
&lt;p>First build failed because of a missing space on line 10 of 2020-04-25-galactic-dinosaurs.md in between the &lt;code>-&lt;/code> and &lt;code>Science&lt;/code>. Second build failed because I didn&amp;rsquo;t save. Third build succeeded in 5 seconds (Whoa, this is supposed to be a lightweight theme!). Looking at the built site, I noticed a typo that created two tags that were meant to be one: &lt;code>Self-improvment&lt;/code> and &lt;code>Self-improvement&lt;/code> were merged and then I build again. Now that everything looks good, time to commit these changes and let the magic of CI take over!&lt;/p>
&lt;p>Talk soon,
Jack&lt;/p></description></item><item><title>An update about this site</title><link>https://jack-champagne.github.io/posts/2020-05-13-site-update-1/</link><pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate><author>jackchampagne.r@gmail.com (Jack Champagne)</author><guid isPermaLink="true">https://jack-champagne.github.io/posts/2020-05-13-site-update-1/</guid><description>&lt;p>Hi! This is Jack. Just writing a short update on the site itself and what&amp;rsquo;s going on behind the scenes =]&lt;/p>
&lt;p>I have been working hard at getting this website viewable to the public and was originally planning on using Github pages with Jekyll. Jekyll is awesome and has a lot of uses for building static sites and blogs just like this. Unfortunately, properly installing a ruby development environment was not a trivial task! I tried many guides but alas there was no success. (Jekyll&amp;rsquo;s guide, Mike Dane&amp;rsquo;s guide on Youtube, a few others that fleet my memory as of right now)&lt;/p>
&lt;p>There are lots of ways of installing and managing your installs of Ruby and each one I tried came with its own set of difficulties. (Rbenv, base install) and there are a lot of tools and &amp;lsquo;gems&amp;rsquo; that ruby uses for jekyll and github pages. Between bundler, rbenv, and my setup (Windows subsystem for linux running Ubuntu 20.04) I decided that I should re-evaluate my options.&lt;/p>
&lt;p>In the past I have researched static site generators for a short stint at a company called &lt;em>Novice Games&lt;/em> (Summer 2019) with my high school classmates of Jack Roche and Nate Romanelli. The two most popular ones that I found were Jeykll and Hugo. When I came to revaluate this site&amp;rsquo;s future in development, Hugo became what is now my main focus to get this published.&lt;/p>
&lt;p>I intend on publishing this site using Hugo (written in the go programming language) and have CI taken care of through Github actions (if possible)&lt;/p>
&lt;p>I do not know much CI at the moment but the CI setup on the UMass-Makerspace&amp;rsquo;s blog was something that I saw real power in and will attempt to apply it to many problems in the future.&lt;/p>
&lt;p>Anywho, the makerspace wrapped up activities for the semester and we ended on a good note as a team. I am looking forward to the summer, getting to spend a little time with my girlfriend, working at AirCycler© (which I will be doing remotely, woohoo!), doing some manual labor in Berlin, NY for my family (Dyken Pond &amp;amp; Center Berlin), and taking care of stuff at home in Duxbury.&lt;/p>
&lt;p>Hope this was a good read if you were curious!
Talk soon,
Jack&lt;/p></description></item></channel></rss>